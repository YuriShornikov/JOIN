CREATE TABLE IF NOT EXISTS musical_genres 
(
	musical_genre_id SERIAL PRIMARY KEY,
	name VARCHAR(60) NOT NULL
);

CREATE TABLE IF NOT EXISTS musicians
(
	musician_id SERIAL PRIMARY KEY,
	name VARCHAR(60) NOT NULL
);

CREATE TABLE IF NOT EXISTS musical_genres_musicias
(
	musical_genres_musicias_id SERIAL PRIMARY KEY,
	musician_id SERIAL NOT NULL references musicians(musician_id),
	musical_genre_id SERIAL NOT NULL references musical_genres(musical_genre_id)
);

CREATE TABLE IF NOT EXISTS albums
(
	album_id SERIAL PRIMARY KEY,
	name VARCHAR(60) NOT NULL,
	album_release INT NOT NULL 
);

CREATE TABLE IF NOT EXISTS musicians_albums
(
	musicians_albums_id SERIAL PRIMARY KEY,
	musician_id SERIAL NOT NULL references musicians(musician_id),
	album_id SERIAL NOT NULL references albums(album_id)
);

CREATE TABLE IF NOT EXISTS digests
(
	digests_id SERIAL PRIMARY KEY,
	name VARCHAR(60) NOT NULL,
	digests_release INT NOT NULL 
);

CREATE TABLE IF NOT EXISTS tracks
(
	track_id SERIAL PRIMARY KEY,
	name VARCHAR(60) NOT NULL,
	time INT NOT NULL,
	album_id SERIAL NOT NULL references albums(album_id)
);

CREATE TABLE IF NOT EXISTS digests_tracks
(
	digests_tracks_id SERIAL PRIMARY KEY,
	digests_id SERIAL NOT NULL references digests(digests_id),
	track_id SERIAL NOT NULL references tracks(track_id)
);

INSERT INTO musicians(name)
VALUES('Михаил Горшенёв'), ('Виктор Цой'), ('Александр Васильев'), ('Алексей Горшенёв'), ('Маша Архипова'), ('Олег Степанов'), ('Тилль Линдеманн'), ('Алексей Юзленко');

SELECT * FROM musicians;

INSERT INTO musical_genres(name)
VALUES('Art pank'), ('Rock'), ('Folk metal'), ('Drum n bass'), ('Indastrisl metal');

SELECT * FROM musical_genres;

INSERT INTO albums(name, album_release)
VALUES('Театр демонов', 2010), ('Группа крови', 1988), ('Встречная полоса', 2018), ('Артист', 2016), ('Храм', 2018), ('Древнерусский рейв', 2021), ('Zeit', 2022), ('Жизнь и Смерть', 2020), ('Вымышленный альбом', 2023);

SELECT * from MUSICIANS_ALBUMS MA ;

SELECT * FROM albums;

INSERT into MUSICAL_GENRES_MUSICIAS(musician_id, musical_genre_id)
VALUES(1, 1), (1, 2), (2, 2), (3, 2), (4, 2), (5, 3), (6, 4), (7, 5), (8, 2);

INSERT into MUSICIANS_ALBUMS(musician_id, album_id)
VALUES(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (1, 9), (2, 9);

select * from MUSICIANS_ALBUMS MA 

SELECT * FROM MUSICAL_GENRES_MUSICIAS;

INSERT INTO tracks(name, time, album_id)
VALUES('Фокусник', 213, 1), ('Темный учитель', 276, 1), ('Группа крови', 286, 2), ('В наших глазах', 215, 2), ('Встречная полоса', 268, 3), ('На утро', 244, 3), 
('Артист', 232, 4), ('Шторм', 242, 4), ('Храм', 590, 5), ('Мантра (Интро)', 231, 5), ('Древнерусский рейв', 220, 6), ('На заре', 214, 6), ('Zeit', 322, 7), ('Giffig', 189, 7), ('Жизнь и Смерть', 254, 8), ('Душа', 189, 8);

SELECT * FROM tracks;

INSERT INTO digests(name, digests_release)
VALUES('Быль и Небыль. Том II', 2022), ('Последний герой', 1989), ('Лучшие песни 90х', 1993), ('Рок хиты', 2010), ('Лучшие фолк треки', 2019), ('Das Modell', 1997), ('Rock hits 150', 2021), ('Hold Your Colour', 2005);

select * from DIGESTS D ;

insert into DIGESTS_TRACKS(digests_id, track_id)
VALUES(1, 3), (1, 4), (2, 1), (2, 2), (3, 3), (4, 1), (4, 2), (4, 3), (5, 9), (5, 10), (7, 1), (7, 3), (7, 5), (7, 6), (7, 7), (7, 8), (7, 15) ;

SELECT * from DIGESTS_TRACKS DT ;

--3.1
SELECT mg.name, count(m.name) FROM musical_genres mg 
JOIN musical_genres_musicias mgm ON mg.musical_genre_id = mgm.musical_genre_id 
JOIN musicians m ON mgm.musician_id = m.musician_id 
GROUP BY mg.name 
ORDER BY count(m.name);

--3.2
SELECT a.name, count(t.name) FROM ALBUMS A 
JOIN tracks t ON a.album_id = t.album_id 
WHERE a.album_release BETWEEN 2019 AND 2020
GROUP BY a.name 
ORDER BY count(t.name);

--3.3
SELECT a.name, avg(t.time) FROM tracks t 
JOIN albums a ON a.album_id = t.album_id 
GROUP BY a.name 
ORDER BY avg(t.time);

--3.4
SELECT DISTINCT m.name FROM musicians m 
JOIN musicians_albums ma ON m.musician_id = ma.musician_id 
JOIN albums a ON ma.album_id = a.album_id
WHERE m.name != (
	SELECT m.name FROM MUSICIANS M 
	join MUSICIANS_ALBUMS MA ON m.MUSICIAN_ID = ma.MUSICIAN_ID 
	join ALBUMS A ON ma.ALBUM_ID = a.ALBUM_ID
	WHERE a.ALBUM_RELEASE = 2020
	)
ORDER BY m.name;


--3.5
SELECT d.name FROM digests d 
JOIN digests_tracks dt ON d.digests_id = dt.digests_id 
JOIN tracks t ON dt.track_id = t.track_id 
JOIN albums a ON t.album_id = a.album_id 
JOIN musicians_albums ma ON a.album_id = ma.album_id 
JOIN musicians m ON ma.musician_id = m.musician_id 
WHERE m.name ='Виктор Цой' OR m.name ='Михаил Горшенёв'
ORDER BY d.name ;

--3.6
SELECT a.name FROM albums a 
JOIN musicians_albums ma ON a.album_id = ma.album_id 
JOIN musicians m ON ma.musician_id = m.musician_id 
JOIN musical_genres_musicias mgm ON m.musician_id = mgm.musician_id 
JOIN musical_genres mg ON mgm.musical_genre_id = mg.musical_genre_id 
GROUP BY a.name
HAVING count(mgm.musician_id) >= 2;


--3.7
SELECT t.name AS track FROM tracks t 
FULL OUTER JOIN digests_tracks dt ON t.track_id = dt.track_id 
FULL OUTER JOIN digests d ON dt.digests_id = d.digests_id 
WHERE d.name IS NULL 


--3.8
SELECT m.name FROM musicians m 
JOIN musicians_albums ma ON m.musician_id = ma.musician_id 
JOIN albums a ON ma.album_id = a.album_id 
JOIN tracks t ON a.album_id = t.album_id
WHERE t.time = (select min(time) FROM tracks)


--3.9 
SELECT a.name FROM albums a
JOIN tracks t ON a.album_id = t.album_id
GROUP BY a.name
HAVING count(t.name) IN (
	SELECT a.name, count(t.name) FROM albums a 
	JOIN tracks t ON a.album_id = t.album_id
	GROUP BY a.name
	ORDER BY count(t.name)
	LIMIT 1
	);